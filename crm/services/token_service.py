# üìå services/token_service.py
import jwt
import json
import datetime
import keyring
from config import SECRET_KEY, REFRESH_SECRET_KEY, ACCESS_TOKEN_EXPIRES_IN, REFRESH_TOKEN_EXPIRES_IN

ISSUER = "EpicEvents"

class TokenService:
    """G√®re la g√©n√©ration, la validation et le stockage s√©curis√© des tokens JWT."""

    @staticmethod
    def generate_token(user, expires_in, secret_key, token_type):
        """Cr√©e un JWT avec une dur√©e de validit√©."""
        payload = {
            "user_id": user.id,
            "iss": ISSUER,
            "exp": datetime.datetime.utcnow() + datetime.timedelta(seconds=expires_in),
            "type": token_type,
        }
        return jwt.encode(payload, secret_key, algorithm="HS256")

    @staticmethod
    def decode_token(token, secret_key):
        """D√©code un JWT et v√©rifie sa validit√©."""
        try:
            return jwt.decode(token, secret_key, algorithms=["HS256"], issuer=ISSUER)
        except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
            return None

    @staticmethod
    def read_session():
        """R√©cup√®re les tokens stock√©s de mani√®re s√©curis√©e via Keyring."""
        data = keyring.get_password("EpicEvents", "session")
        return json.loads(data) if data else {}

    @staticmethod
    def write_session(session_data):
        """Sauvegarde s√©curis√©e des tokens via Keyring."""
        keyring.set_password("EpicEvents", "session", json.dumps(session_data))

    @staticmethod
    def clear_session():
        """Supprime les tokens stock√©s."""
        keyring.delete_password("EpicEvents", "session")

    @staticmethod
    def refresh_access_token():
        """G√©n√®re un nouvel access_token en utilisant le refresh_token."""
        session_data = TokenService.read_session()
        refresh_token = session_data.get("refresh_token")

        if not refresh_token:
            return None  # Aucun refresh token stock√©

        decoded = TokenService.decode_token(refresh_token, REFRESH_SECRET_KEY)
        if not decoded:
            return None  # Refresh token invalide ou expir√©

        # G√©n√©ration d'un nouveau token d'acc√®s
        user_id = decoded["user_id"]
        new_access_token = TokenService.generate_token(
            type("User", (object,), {"id": user_id}),  # Simulation d'un user object
            ACCESS_TOKEN_EXPIRES_IN,
            SECRET_KEY,
            "access",
        )

        session_data["access_token"] = new_access_token
        TokenService.write_session(session_data)

        return new_access_token
