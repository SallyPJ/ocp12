from sqlalchemy import create_engine, text
from models.base import Base
from config import DATABASE_URL  # Ton URL de base de donn√©es

# Connexion √† l'engine initial (avant de supprimer la base)
engine = create_engine(DATABASE_URL, echo=True)


def reset_database():
    """Supprime et recr√©e la base de donn√©es."""
    # Connexion manuelle pour g√©rer la cr√©ation de base de donn√©es
    with engine.connect() as conn:
        # Suppression de la base de donn√©es existante
        print("‚ö†Ô∏è Suppression de la base de donn√©es...")
        conn.execute(text("DROP DATABASE IF EXISTS epic_events_crm_dev;"))

        # Cr√©ation de la base de donn√©es
        print("üöÄ Cr√©ation de la base de donn√©es...")
        conn.execute(text("CREATE DATABASE epic_events_crm_dev;"))

    # Assurez-vous que l'URL pointe vers la base cr√©√©e
    new_database_url = DATABASE_URL.replace(
        "epic_events_crm_dev", "epic_events_crm_dev"
    )  # Remplacer le nom de la DB ici si n√©cessaire
    new_engine = create_engine(new_database_url, echo=True)  # Connexion √† la nouvelle base

    # Recr√©ation des tables
    print("üîÑ Recr√©ation des tables...")
    try:
        Base.metadata.create_all(new_engine)
        print("‚úÖ Tables recr√©√©es avec succ√®s.")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {str(e)}")

    # V√©rification des tables dans la base
    with new_engine.connect() as conn:
        result = conn.execute(text("SHOW TABLES"))
        print(f"üõ†Ô∏è Tables dans la base de donn√©es apr√®s cr√©ation : {[row[0] for row in result]}")


if __name__ == "__main__":
    reset_database()
